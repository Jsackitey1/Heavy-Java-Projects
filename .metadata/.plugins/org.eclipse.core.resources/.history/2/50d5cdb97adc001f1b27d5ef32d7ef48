import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;

public class BigFraction {
	public static final BigFraction ONE = null;
	public static final BigFraction ZERO = null;
	private BigInteger num;
	private BigInteger den;
	
	
	
	BigFraction(BigInteger num, BigInteger den){
		
		BigInteger GCD= num.gcd(den);
		this.num=this.num.divide(GCD);
		this.den=this.den.divide(GCD);
		
		if (this.den.signum()<0) {
			this.den.negate();
			this.num.negate();
		}
		
	}
	
	
	BigFraction(BigFraction f){
		String[] parts= f.toString().split("/");
		BigInteger num= new BigInteger(parts[0]);
		BigInteger den= new BigInteger(parts[1]);
		
		this.num=num;
		this.den=den;
		
		BigFraction fraction = new BigFraction(num,den);
	}
	

	BigFraction(long numerator, long denominator){
		BigInteger num=BigInteger.valueOf(numerator);
		BigInteger den=BigInteger.valueOf(denominator);
		
		this.num=num;
		this.den=den;
		
		BigFraction fraction= new BigFraction(num,den);

		
		
	}
	
	BigFraction(java.lang.String s){
		String[] parts=s.split("/");
		BigInteger num=new BigInteger(parts[0]);
		BigInteger den=new BigInteger(parts[1]);
		this.num=num;
		this.den=den;
		
		BigFraction fraction= new BigFraction(num,den);
		
	}
	
	
	public BigFraction add(BigFraction b) {
		
		return b;
	}
	
	public BigDecimal asBigDecimal(int scale, RoundingMode roundingMode){
		
		
	} 
	
	
	public BigFraction divide(BigFraction b) {
		
	}
	
	public BigInteger getDen() {
		return den;
		
	}
	
	public BigInteger getNum() {
		return num;
		
	}
	
	public BigFraction multiply(BigFraction b) {
		
	}
	
	public BigFraction negate() {
		
		
	}
	
	public BigFraction  subtract(BigFraction b) {
		
	}
	
	public java.lang.String toString(){
		
	}

}
